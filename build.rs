use std::env;
use std::fs;
use std::fs::File;
use std::io::prelude::*;

fn main() {
    compile_static_resources();
}

fn compile_static_resources() {
    let mut resource_path = env::current_dir().unwrap();
    resource_path.push("src/resources");

    let paths = fs::read_dir(resource_path).unwrap();

    let head = "
// Generated by build.rs

use std::collections::HashMap;


pub struct Resource {
    pub r: HashMap<&'static str, &'static str>
}


impl Resource {
    pub fn new() -> Resource {
        let mut res: HashMap<&'static str, &'static str> = HashMap::new();
"
    .to_string();

    let tail = "
        Resource {
             r: res
         }
    }
}"
    .to_string();

    let mut body = String::new();

    for p in paths {
        let path = p.unwrap();

        if path.file_type().unwrap().is_dir() {
            continue;
        }
        let mut file = File::open(path.path().as_os_str()).unwrap();
        let mut buff = String::new();
        file.read_to_string(&mut buff).unwrap();

        let f_body = buff.replace("\"", "\\\"");
        let f_name = path.file_name().into_string().unwrap();

        body.push_str(&format!(
            "        res.insert(\"/resource/{}\", \"{}\");\n",
            f_name, f_body
        ));
    }

    let mut resource_buff = String::new();
    resource_buff.push_str(&head);
    resource_buff.push_str(&body);
    resource_buff.push_str(&tail);

    let mut file = File::create("src/static_r.rs").unwrap();
    file.write_all(resource_buff.as_bytes()).unwrap();
}
